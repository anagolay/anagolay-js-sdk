// import { rule } from './runtime/poe/operations/poe-photo';
// import { createRulePayload } from './runtime/poe';

import R from 'ramda';
import { createDefaultRules } from './runtime/poe/helpers';
import { getProofs, getRules } from './runtime/poe/poe';
import { getAlice, setupConnection } from './setupConnection';
async function main(): Promise<void> {
  try {
    // await testStuff();
    // return;

    const api = await setupConnection();

    const alice = getAlice();

    const rules = await getRules(api);

    setInterval(async () => {
      const proofs = await getProofs(api);

      console.log('Proofs', proofs);
    }, 5000);

    if (R.isEmpty(rules) || rules.length !== 3) {
      console.log('No rules defined, creating ...');
      await createDefaultRules(api, alice);
    } else {
      const imageRule = rules.find((r) => r.rule.forWhat.isPhoto);
      console.log(imageRule);
      if (!R.isEmpty(imageRule)) {
        // const data = resolve('./assets/test-photos/copyrighted-image.jpg');
        // const p = await processRule(data, imageRule, true);
        // console.log(p);
        // await createClaimTX(api, alice, p);
        // await processImageForPoE(resolve('./assets/test-photos/copyrighted-image.dng'));
        // await processImageForPoE(resolve('./assets/test-photos/_MG_4991.CR2'));
      }
    }
  } catch (error) {
    console.error(error);
  }

  // to create a poe rule

  // formatToUUID('C4CEBFD8B6A782A5E0DC32AFE31D6D09');
}

main()
  .catch((e) => console.error('Something went wrong with the connection or something else', e))
  .finally();
/**
 *
 *
 * hashes or the KEYS, they are generated by the hasher in rust
 *
 *
 * 0x4089830b5cf7d628521896f0642fffa66893fa5565c375789bd56f57600396a6
 * 0x6f53ae14a8d800bd9ba6e87c1d05ed87857d75741d9082616137935d2e173819
 * 0x2b522fc050d747a0e71419cca2bb1439f74329f61a22eadcb6a0c18c260f26fa
 */
