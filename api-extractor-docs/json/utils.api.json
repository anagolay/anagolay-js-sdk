{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.19.4",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@anagolay/utils!",
  "docComment": "/**\n * A Utility library for anagolay js\n *\n * @remarks\n *\n * We will re-export some of the packages that everbody will need.\n *\n * One of those libraries is `@polkadot/util` re-exported as `polkadot_util`.\n *\n * @packageDocumentation\n */\n",
  "name": "@anagolay/utils",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@anagolay/utils!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!allCommitsPushed:function(1)",
          "docComment": "/**\n * Did the user pushed all the commits? Returns true if yes, false if not\n *\n * @param cwd - \n *\n * @returns \n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function allCommitsPushed(cwd: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<boolean>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cwd",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "allCommitsPushed"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!cloneRepo:function(1)",
          "docComment": "/**\n * Clone repo as non-bare and return path\n *\n * @param options - {@link IGitCloneOptions}\n *\n * @param log - Optional {@link Logger}\n *\n * @returns the local cloned path, usually in the `/temp/anagolay` directory\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function cloneRepo(options: "
            },
            {
              "kind": "Reference",
              "text": "IGitCloneOptions",
              "canonicalReference": "@anagolay/utils!IGitCloneOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", log?: "
            },
            {
              "kind": "Reference",
              "text": "Logger",
              "canonicalReference": "pino!Logger:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n    repoPath: string;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "log",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "cloneRepo"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!createFileLogger:function(1)",
          "docComment": "/**\n * Create the PINO File logger, the abs path should exist before calling this\n *\n * @param options - All Pino options\n *\n * @returns \n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createFileLogger(fileLocation: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "LoggerOptions",
              "canonicalReference": "pino!LoggerOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Logger",
              "canonicalReference": "@anagolay/utils!Logger:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fileLocation",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "createFileLogger"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!createLogger:function(1)",
          "docComment": "/**\n * Create the PINO logger\n *\n * @param options - \n *\n * @returns \n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createLogger(options?: "
            },
            {
              "kind": "Reference",
              "text": "LoggerOptions",
              "canonicalReference": "pino!LoggerOptions:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DestinationStream",
              "canonicalReference": "pino!DestinationStream:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Logger",
              "canonicalReference": "@anagolay/utils!Logger:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "name": "createLogger"
        },
        {
          "kind": "Variable",
          "canonicalReference": "@anagolay/utils!defaultExecOptions:var",
          "docComment": "/**\n * Default exec options\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "defaultExecOptions: "
            },
            {
              "kind": "Reference",
              "text": "IExecOptions",
              "canonicalReference": "@anagolay/utils!IExecOptions:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "defaultExecOptions",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!exec:function(1)",
          "docComment": "/**\n * Async Exec with decent defaults\n *\n * @param command - \n *\n * @param options - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function exec(command: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", options?: "
            },
            {
              "kind": "Reference",
              "text": "IExecOptions",
              "canonicalReference": "@anagolay/utils!IExecOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PromiseWithChild",
              "canonicalReference": "!\"\\\"child_process\\\"\".PromiseWithChild:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n    stdout: string;\n    stderr: string;\n}>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "command",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "exec"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!gitCloneBare:function(1)",
          "docComment": "/**\n * Clone bare repo and return path and by default use the unpacking of the objects\n *\n * @param repo - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function gitCloneBare(options: "
            },
            {
              "kind": "Reference",
              "text": "IGitCloneBareOptions",
              "canonicalReference": "@anagolay/utils!IGitCloneBareOptions:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "gitCloneBare"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!hexToString:function(1)",
          "docComment": "/**\n * Take a 0x prefixed string or not and return the actual value.\n *\n * @remarks\n *\n * Uses the ramda.js\n *\n * @returns Decoded hex string output.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hexToString(hexString: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "hexString",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "hexToString"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@anagolay/utils!IExecOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IExecOptions extends "
            },
            {
              "kind": "Reference",
              "text": "BaseExecOptions",
              "canonicalReference": "!\"\\\"child_process\\\"\".ExecOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IExecOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@anagolay/utils!IExecOptions#encoding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encoding?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferEncoding",
                  "canonicalReference": "!__global.BufferEncoding:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "encoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@anagolay/utils!IGitCloneBareOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IGitCloneBareOptions extends "
            },
            {
              "kind": "Reference",
              "text": "IGitCloneOptions",
              "canonicalReference": "@anagolay/utils!IGitCloneOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IGitCloneBareOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@anagolay/utils!IGitCloneBareOptions#unpack:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unpack?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "unpack",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@anagolay/utils!IGitCloneOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IGitCloneOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "IGitCloneOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@anagolay/utils!IGitCloneOptions#bare:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bare?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "bare",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@anagolay/utils!IGitCloneOptions#branch:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "branch?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "branch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@anagolay/utils!IGitCloneOptions#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@anagolay/utils!IGitCloneOptions#rev:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rev: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rev",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@anagolay/utils!IGitCloneOptions#tag:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tag?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "tag",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!isDirty:function(1)",
          "docComment": "/**\n * If there are modified or untracked files consider this a very _`dirty`_ repository\n *\n * @param path - string - Local path\n *\n * @returns `{ dirty: boolean; changes: string; }`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDirty(path: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<{\n    dirty: boolean;\n    changes: string;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "path",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isDirty"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!isFalse:function(1)",
          "docComment": "/**\n * checks against the common value options for the false boolean value\n *\n * @param value - Can be `'false' | '0' | 0`\n *\n * @returns Boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFalse(value: "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isFalse"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!isTrue:function(1)",
          "docComment": "/**\n * checks against the common value options for the true boolean value\n *\n * @param value - Can be `'true' | '1' | 1`\n *\n * @returns Boolean\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTrue(value: "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isTrue"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!lastRevision:function(1)",
          "docComment": "/**\n * Give me the Last revision from origin/main\n *\n * Currently assuming the `remote = origin` and `default_branch = main`\n *\n * @param repoPath - \n *\n * @returns a full length revision hash\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function lastRevision(repoPath: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "repoPath",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "lastRevision"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@anagolay/utils!Logger:type",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Logger = "
            },
            {
              "kind": "Reference",
              "text": "PinoLogger",
              "canonicalReference": "pino!Logger:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Logger",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!normalizeUrlPathname:function(1)",
          "docComment": "/**\n * Normalize Repository to be in a format `username_repo-name`\n *\n * @param pathName - \n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function normalizeUrlPathname(pathName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "pathName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "normalizeUrlPathname"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!parse:function(1)",
          "docComment": "/**\n * Wrapper around the JSON.parse with defaults for de-serialization of the non native object like `Map`.\n *\n * @remarks\n *\n * It's fully typed thanks to the generics. To get the type autocompletion see [test file](./index.test.ts)\n *\n * @param data - String data produced with `JSON.stringify`\n *\n * @param reviver - A function that knows how to handle custom de-serialization. Opposite of {@link customReplacer}\n *\n * @returns \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parse<T>(data: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", reviver?: "
            },
            {
              "kind": "Reference",
              "text": "ReplacerOrReviverAsFunction",
              "canonicalReference": "@anagolay/utils!~ReplacerOrReviverAsFunction:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Jsonify",
              "canonicalReference": "@anagolay/utils!Jsonify:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "reviver",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "parse"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!parseURL:function(1)",
          "docComment": "/**\n * Parse git supported url to https scheme\n *\n * @remarks\n *\n * See `git.test.ts` for the examples\n *\n * @param sourceURL - string - Any of the [git supported url scheme](https://git-scm.com/docs/git-clone#_git_urls)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseURL(sourceURL: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sourceURL",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "parseURL"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!serialize:function(1)",
          "docComment": "/**\n * Wraps the `JSON.stringify` with the replacer function which is aware of the javascript `Maps`\n *\n * @remarks\n *\n * This implementation can be used almost as a drop in replacement to native JSON.stringify with only one difference. Native JSON.stringify has following signature `(data,replacer,space)` where this function has `(data,space,replacer)`. This is done intentionally because most of the time we customize the `space` and not the `replacer`.\n *\n * @param data - `T` generic value. Same type as it is in the `JSON.stringify`\n *\n * @param space - How many spaces will be added to the serialization process.\n *\n * @param replacer - Accepts the same types as native implementation ({@link ReplacerOrReviverAsFunction} and {@link ReplacerAsArray}), by default will use {@link customReplacer}.\n *\n * @returns String with executed `replacer` function if no replacer is provided\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serialize<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": ", space?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", replacer?: "
            },
            {
              "kind": "Reference",
              "text": "ReplacerOrReviverAsFunction",
              "canonicalReference": "@anagolay/utils!~ReplacerOrReviverAsFunction:type"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "ReplacerAsArray",
              "canonicalReference": "@anagolay/utils!~ReplacerAsArray:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "space",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "replacer",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "serialize"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!serializeThenParse:function(1)",
          "docComment": "/**\n * This does `parse(serialize(x))` with inferring the type.\n *\n * @remarks\n *\n * - The biggest use of this is to get the types autocompleted. - The performance is NOT tested, it might be really slow\n *\n * @param data - Any defined `T` or nothing, then the T will be inferred\n *\n * @returns Parsed serialized data with type infering\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serializeThenParse<T>(data: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Jsonify",
              "canonicalReference": "@anagolay/utils!Jsonify:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "serializeThenParse"
        },
        {
          "kind": "Function",
          "canonicalReference": "@anagolay/utils!urlForRemote:function(1)",
          "docComment": "/**\n * Return the URL for the git remote.\n *\n * @remarks\n *\n * This function is using the `git remote get-url --all` then invokes the {@link parseURL} if parse parameter is true\n *\n * @param remote - An origin as defined in the .git/config\n *\n * @param parse - Flag that dictates whether to parse the url or not\n *\n * @defaultValue\n *\n * for `remote` param is `origin`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function urlForRemote(remote?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", parse?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "remote",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "parse",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "urlForRemote"
        }
      ]
    }
  ]
}
